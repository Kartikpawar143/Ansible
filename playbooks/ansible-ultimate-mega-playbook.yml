# =============================================================================
# Ultimate Ansible Mega Playbook
# Description: A full reference playbook demonstrating almost all popular Ansible modules
# Author: Your Name
# =============================================================================

- name: Ultimate Ansible Mega Playbook
  hosts: all
  become: yes                  # Run all tasks as root
  gather_facts: yes            # Collect facts about remote systems

  # ------------------------
  # Variables - Reusable values
  # ------------------------
  vars:
    my_user: megauser
    my_group: megagroup
    my_file: /tmp/mega_file.txt
    my_dir: /tmp/mega_dir
    my_service: nginx
    my_package_apt: tree
    my_package_yum: wget
    my_pip_package: requests
    my_url: https://example.com/index.html
    my_dest: /tmp/index.html
    my_repo: "deb http://archive.ubuntu.com/ubuntu bionic main restricted"
    my_cron_name: "cleanup_tmp"
    my_command: "uptime"
    my_s3_bucket: "my-test-bucket"
    my_docker_image: "nginx:latest"
    my_docker_container: "mega_nginx"
    user_list:
      - user1
      - user2
      - user3

  tasks:

    # =============================================================================
    # 1. PACKAGE MANAGEMENT
    # Install, remove, and manage packages via apt, yum, and pip
    # =============================================================================
    - name: Install APT package
      apt:
        name: "{{ my_package_apt }}"
        state: present
        update_cache: yes

    - name: Install YUM package
      yum:
        name: "{{ my_package_yum }}"
        state: present

    - name: Install Python package via pip
      pip:
        name: "{{ my_pip_package }}"
        state: present

    - name: Remove a package (vim example)
      apt:
        name: vim
        state: absent

    - name: Ensure multiple packages are installed
      apt:
        name:
          - htop
          - curl
        state: present

    # =============================================================================
    # 2. SERVICE MANAGEMENT
    # Start, stop, and enable system services
    # =============================================================================
    - name: Ensure nginx service is running
      service:
        name: "{{ my_service }}"
        state: started
        enabled: yes

    - name: Ensure docker service is running via systemd
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Stop apache2 service
      service:
        name: apache2
        state: stopped

    # =============================================================================
    # 3. FILE AND DIRECTORY OPERATIONS
    # Create files, directories, copy templates, fetch files, and modify contents
    # =============================================================================
    - name: Create a file
      file:
        path: "{{ my_file }}"
        state: touch
        owner: "{{ my_user }}"
        group: "{{ my_group }}"
        mode: '0644'

    - name: Create a directory
      file:
        path: "{{ my_dir }}"
        state: directory
        owner: "{{ my_user }}"
        group: "{{ my_group }}"
        mode: '0755'

    - name: Copy a local file to remote host
      copy:
        src: /home/ubuntu/sample.txt
        dest: "{{ my_dir }}/sample.txt"
        owner: "{{ my_user }}"
        group: "{{ my_group }}"
        mode: '0644'
        backup: yes

    - name: Template a configuration file
      template:
        src: templates/config.j2
        dest: "{{ my_dir }}/config.conf"
        owner: "{{ my_user }}"
        group: "{{ my_group }}"
        mode: '0644'

    - name: Fetch a remote file to local
      fetch:
        src: /tmp/testfile.txt
        dest: /home/ubuntu/fetched/
        flat: yes

    - name: Add line to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "192.168.1.10 mega-server"
        state: present
        create: yes

    - name: Replace a line in a file using regex
      replace:
        path: /tmp/config.conf
        regexp: 'option=.*'
        replace: 'option=new_value'

    - name: Remove a file
      file:
        path: /tmp/remove_me.txt
        state: absent

    # =============================================================================
    # 4. USER AND GROUP MANAGEMENT
    # Create and remove users and groups
    # =============================================================================
    - name: Create group
      group:
        name: "{{ my_group }}"
        state: present

    - name: Create a user
      user:
        name: "{{ my_user }}"
        state: present
        shell: /bin/bash
        groups: "{{ my_group }}"
        create_home: yes

    - name: Remove old user
      user:
        name: olduser
        state: absent
        remove: yes

    - name: Loop to create multiple users
      user:
        name: "{{ item }}"
        state: present
        shell: /bin/bash
      loop: "{{ user_list }}"

    # =============================================================================
    # 5. NETWORKING AND FIREWALL
    # Manage repositories, ufw, and firewalld
    # =============================================================================
    - name: Add apt repository
      apt_repository:
        repo: "{{ my_repo }}"
        state: present
        update_cache: yes

    - name: Enable firewall and allow SSH
      ufw:
        state: enabled
        rule: allow
        name: OpenSSH

    - name: Open port 80 via firewalld
      firewalld:
        port: 80/tcp
        permanent: yes
        state: enabled
        immediate: yes

    # =============================================================================
    # 6. DOWNLOAD AND ARCHIVE
    # Download files and extract archives
    # =============================================================================
    - name: Download a file from URL
      get_url:
        url: "{{ my_url }}"
        dest: "{{ my_dest }}"
        mode: '0644'
        force: yes

    - name: Unarchive a tar file
      unarchive:
        src: /tmp/archive.tar.gz
        dest: /tmp/extracted
        remote_src: yes

    # =============================================================================
    # 7. COMMANDS, SHELL, AND SCRIPT
    # Run commands, shell scripts, and register output
    # =============================================================================
    - name: Run a shell command
      shell: "echo 'Hello Mega Playbook' > /tmp/mega.txt"
      args:
        executable: /bin/bash

    - name: Run a command and register output
      command: "{{ my_command }}"
      register: uptime_output

    - name: Display command output
      debug:
        var: uptime_output.stdout_lines

    - name: Run a remote script
      script: scripts/remote_script.sh

    # =============================================================================
    # 8. GIT OPERATIONS
    # Clone repositories
    # =============================================================================
    - name: Clone a Git repository
      git:
        repo: 'https://github.com/ansible/ansible-examples.git'
        dest: /tmp/ansible-examples
        version: master
        force: yes

    # =============================================================================
    # 9. CRON JOBS
    # Schedule recurring tasks
    # =============================================================================
    - name: Add a cron job
      cron:
        name: "{{ my_cron_name }}"
        minute: "0"
        hour: "3"
        job: "rm -rf /tmp/*.tmp"
        state: present

    # =============================================================================
    # 10. CLOUD STORAGE (AWS S3 Example)
    # =============================================================================
    - name: Upload a file to S3
      aws_s3:
        bucket: "{{ my_s3_bucket }}"
        object: mega_file.txt
        src: "{{ my_file }}"
        mode: put
      register: s3_result

    - name: Display S3 upload result
      debug:
        var: s3_result

    # =============================================================================
    # 11. DOCKER MANAGEMENT
    # Pull images and run containers
    # =============================================================================
    - name: Pull Docker image
      docker_image:
        name: "{{ my_docker_image }}"
        source: pull

    - name: Run Docker container
      docker_container:
        name: "{{ my_docker_container }}"
        image: "{{ my_docker_image }}"
        state: started
        restart_policy: always
        ports:
          - "8080:80"

    # =============================================================================
    # 12. DEBUG, ASSERTIONS, PAUSE, AND WAIT
    # =============================================================================
    - name: Debug a message
      debug:
        msg: "Ultimate Mega Playbook executed!"

    - name: Assert OS family
      assert:
        that:
          - ansible_facts['os_family'] in ['Debian', 'RedHat']
        fail_msg: "Unsupported OS detected!"
        success_msg: "OS is supported"

    - name: Pause for 5 seconds
      pause:
        seconds: 5

    - name: Wait for file to exist
      wait_for:
        path: "{{ my_file }}"
        state: present
        timeout: 30

    # =============================================================================
    # 13. CONDITIONALS
    # Run tasks based on facts
    # =============================================================================
    - name: Conditional task example
      debug:
        msg: "This task runs only on Ubuntu"
      when: ansible_distribution == "Ubuntu"

    # =============================================================================
    # 14. HANDLERS
    # Actions triggered by notify
    # =============================================================================
    - name: Template nginx config
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify:
        - restart nginx

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
